#所有自定义的日志都会继承rootLogger
log4j.rootLogger = trace,myconsole,file,rollingFileAppender,dailyRollingFileAppender


##定义一个输出到文件appender 使用FileAppender 默认追加在一个文件
log4j.appender.file = org.apache.log4j.FileAppender
log4j.appender.file.layout = org.apache.log4j.PatternLayout
#指定消息的内容
log4j.appender.file.layout.conversionPattern = [%d{yyyy-MM-dd HH:mm:ss}] [%l] %m%n
#指定日志文件的保存路径
log4j.appender.file.file = C:/Users/Administrator/Desktop/log_output/log4j_log.log
#日志文件编码
log4j.appender.file.encoding = UTF-8

##定义一个输出到文件appender 使用DailyRollingFileAppender 是FileAppender的一个子类 按照时间拆分的appender对象
log4j.appender.dailyRollingFileAppender = org.apache.log4j.DailyRollingFileAppender
log4j.appender.dailyRollingFileAppender.layout = org.apache.log4j.PatternLayout
#指定消息的内容
log4j.appender.dailyRollingFileAppender.layout.conversionPattern = [%d{yyyy-MM-dd HH:mm:ss}] [%l] %m%n
#指定日志文件的保存路径
log4j.appender.dailyRollingFileAppender.file = C:/Users/Administrator/Desktop/log_output/log4j_dailyRollingFileAppender.log
#日志文件编码
log4j.appender.dailyRollingFileAppender.encoding = UTF-8
#指定日志文件的日期拆分规则
log4j.appender.dailyRollingFileAppender.datePattern = '.'yyyy-MM-dd-HH-mm-ss




##定义一个输出到文件appender 使用RollingFileAppender 是FileAppender的一个子类 按照文件大小拆分的appender对象
log4j.appender.rollingFileAppender = org.apache.log4j.RollingFileAppender
log4j.appender.rollingFileAppender.layout = org.apache.log4j.PatternLayout
#指定消息的内容
log4j.appender.rollingFileAppender.layout.conversionPattern = [%d{yyyy-MM-dd HH:mm:ss}] [%l] %m%n
#指定日志文件的保存路径
log4j.appender.rollingFileAppender.file = C:/Users/Administrator/Desktop/log_output/log4j_rollingFileAppender.log
#日志文件编码
log4j.appender.rollingFileAppender.encoding = UTF-8
#指定日志文件的大小
log4j.appender.rollingFileAppender.maxFileSize = 1MB
#指定日志文件的数量 超过按照时间覆盖
log4j.appender.rollingFileAppender.maxBackupIndex = 10




##定义一个输出到控制台appender
log4j.appender.myconsole = org.apache.log4j.ConsoleAppender
log4j.appender.myconsole.layout = org.apache.log4j.PatternLayout
#指定消息的内容
log4j.appender.myconsole.layout.conversionPattern = [%d{yyyy-MM-dd HH:mm:ss}] [%l] %m%n

# log4j 采用类似 C 语言的 printf 函数的打印格式格式化日志信息，具体的占位符及其含义如下：
# %m 输出代码中指定的日志信息
# %p 输出优先级，及 DEBUG、INFO 等
# %n 换行符（Windows平台的换行符为 "\n"，Unix 平台为 "\n"）
# %r 输出自应用启动到输出该 log 信息耗费的毫秒数
# %c 输出打印语句所属的类的全名
# %t 输出产生该日志的线程全名
# %d 输出服务器当前时间，默认为 ISO8601，也可以指定格式，如：%d{yyyy年MM月dd日HH:mm:ss}
# %l 输出日志时间发生的位置，包括类名、线程、及在代码中的行数。如：Test.main(Test.java:10)
# %F 输出日志消息产生时所在的文件名称
# %L 输出代码中的行号
# %% 输出一个 "%" 字符可以在 % 与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式。如：
#  %5c 输出category名称，最小宽度是5，category<5，默认的情况下右对齐
#  %-5c 输出category名称，最小宽度是5，category<5，"-"号指定左对齐,会有空格
#  %.5c 输出category名称，最大宽度是5，category>5，就会将左边多出的字符截掉，<5不
# 会有空格
# %20.30c category名称<20补空格，并且右对齐，>30字符，就从左边交远销出的字符截掉
